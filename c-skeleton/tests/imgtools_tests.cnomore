#include "minunit.h"
#include "../src/imgtools.h"

void readIntArray(const char *filename, int *array, int length) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        fprintf(stderr, "Error opening file: %s\n", filename);
        exit(1);
    }

    for (int i = 0; i < length; i++) {
        if (fscanf(file, "%d,", &array[i]) != 1) {
            fprintf(stderr, "Error reading integer from file: %s\n", filename);
            exit(1);
        }
        // printf("%d,", array[i]);
    }

    fclose(file);
}

char *test_loadBnp_destroyImage() {
    IMAGE *img = malloc(sizeof(IMAGE));
    check_mem(img);
    int rc = loadBnp(img, "/mnt/c/Users/jaro/Documents/A_privat_dev/DynamicFocus/C/c-skeleton/tests/1.bmp");
    mu_assert(rc==0, "failed to load img"); 

    rc = destroyImage(img);
    mu_assert(rc==0, "failed to destroy img"); 

    return NULL; 
error: 
    return "memory error in test, not fault of subjects of tests";
}

char *test_switchLineOrder() {
    // IMPORTANT! this test won't work if in future switchLineOrder requires proper INFOHEADER and FILEHEADER
    // in general I would say this test is not very good, but w/e
    IMAGE *img = malloc(sizeof(IMAGE));
    check_mem(img);

    img->imageData = malloc(25);
    check_mem(img->imageData); 

    int imgData[] = {
        1,1,1,1,1,
        2,2,2,2,2,
        3,3,3,3,3,
        4,4,4,4,4,
        5,5,5,5,5
    };

    for(int i = 0; i < 25; i++) {
        img->imageData[i] = (unsigned char) imgData[i];
    }

    INFOHEADER dummyHeader = {
        .biSize = sizeof(INFOHEADER),
        .width = 5,
        .height = 5,
        .planes = 1,             // Typically 1 for BMP
        .bitPix = 8,            // Assuming a 24-bit color depth (can change as needed)
        .biCompression = 0,      // No compression
        .biSizeImage = 5 * 5, // Width * Height * (Bit depth / 8), assuming 24 bits per pixel
        .biXPelsPerMeter = 0,    // Resolution not specified
        .biYPelsPerMeter = 0,    // Resolution not specified
        .biClrUsed = 0,          // Number of colors used (0 for default)
        .biClrImportant = 0      // All colors are important
    };

    img->ih = dummyHeader;

    int rc = switchLineOrder(img);
    mu_assert(rc == 0, "return code not zero (switchLineOrder)")

    for(int i = 0; i < 25; i++) {
        // note: this is only valid because the lines consist of the same data
        // printf("\n%d-%d\n", img->imageData[i], imgData[24-i]);
        mu_assert(img->imageData[i] == (unsigned char) imgData[24-i], "switchLineOrder didn't reverse");
    }

    free(img->imageData);
    free(img);

    return NULL;
error: 
    return "error not caused by mu_assert";
}

char *test_padImg() {
    int srcVals[] = {
        1,1,1,1,1,
        1,2,1,1,1,
        1,1,3,1,1,
        1,1,1,4,1,
        1,1,1,1,5
    };
    int tgtVals[] = {
        0,0,0,0,0,0,0,
        0,1,1,1,1,1,0,
        0,1,2,1,1,1,0,
        0,1,1,3,1,1,0,
        0,1,1,1,4,1,0,
        0,1,1,1,1,5,0,
        0,0,0,0,0,0,0
    };

    unsigned char *src = malloc(25);
    check_mem(src);

    for(int i = 0; i < 25; i++) {
        src[i] = (unsigned char) srcVals[i];
    }

    unsigned char *tgt = padImg(src, 5, 5, 0);

    /*
    printf("\n\n");
    for(int i = 0; i < 49; i++) {
        printf("%d,", tgt[i]);
        if(i%7==6) printf("\n");
    }
    */

    for(int i = 0; i < 49; i++) {
        mu_assert(tgt[i] == (unsigned char) tgtVals[i], "padImg failed to produce expected target!");
    }

    free(src);
    free(tgt);
    return NULL;

error: 
    return "non mu_assert error"; 
}

char *test_padImgReflective() {
    int srcVals[] = {
        130,200,215,213,94,
        208,245,68,190,60,
        141,50,127,195,164,
        27,106,20,46,253,
        248,98,200,44,75  
    };
    int tgtVals[] = {
       245,208,245,68,190,60,190,
       200,130,200,215,213,94,213,
       245,208,245,68,190,60,190,
       50,141,50,127,195,164,195,
       106,27,106,20,46,253,46,
       98,248,98,200,44,75,44,
       106,27,106,20,46,253,46
    };

    unsigned char *src = malloc(25);
    check_mem(src);

    for(int i = 0; i < 25; i++) {
        src[i] = (unsigned char) srcVals[i];
    }

    unsigned char *tgt = padImgReflective(src, 5, 5);
    
    // printf("\n\n");
    // for(int i = 0; i < 25; i++) {
    //     printf("%d,", src[i]);
    //     if(i%5==4) printf("\n");
    // }

    // printf("\n\n");
    // for(int i = 0; i < 49; i++) {
    //     printf("%d,", tgt[i]);
    //     if(i%7==6) printf("\n");
    // }
    

    for(int i = 0; i < 49; i++) {
        mu_assert(tgt[i] == (unsigned char) tgtVals[i], "padImg failed to produce expected target!");
    }

    free(src);
    free(tgt);
    return NULL;

error: 
    return "non mu_assert error"; 
}

char *test_trimImg() {
    int srcVals[] = {
        0,0,0,0,0,0,0,
        0,1,1,1,1,1,0,
        0,1,2,1,1,1,0,
        0,1,1,3,1,1,0,
        0,1,1,1,4,1,0,
        0,1,1,1,1,5,0,
        0,0,0,0,0,0,0
    };
    int tgtVals[] = {
        1,1,1,1,1,
        1,2,1,1,1,
        1,1,3,1,1,
        1,1,1,4,1,
        1,1,1,1,5
    };
    unsigned char *src = malloc(49); 
    check_mem(src); 

    for(int i = 0; i < 49; i++) {
        src[i] = (unsigned char) srcVals[i];
    }

    unsigned char *tgt = trimImg(src, 7, 7);
    
    for(int i = 0; i < 25; i++) {
        mu_assert(tgt[i] == (unsigned char) tgtVals[i], "tgt not trimmed");
    }

    free(src); 
    free(tgt);
    return NULL; 
error: 
    return "non mu_assert error";
}

char *test_laplacianTransform(){
    int *paddedTgt = malloc(22*22*sizeof(int)); // take account of padding
    check_mem(paddedTgt);
    unsigned char *src = malloc(400); 
    check_mem(src);

    // srcVals and expectedVals were generated by a python script 
    int srcVals[] = {
        172,10,127,140,47,170,196,151,117,166,22,183,192,204,33,216,67,179,78,154,251,82,162,219,195,118,125,139,103,125,229,216,9,164,116,108,211,222,161,159,21,81,89,165,242,214,102,98,36,183,5,112,87,58,43,76,70,60,75,228,216,189,132,14,88,154,178,246,140,205,204,69,58,57,41,98,193,66,72,122,230,125,174,202,39,74,234,207,87,168,101,135,174,200,223,122,88,94,107,145,81,139,141,100,165,230,243,236,25,66,9,214,77,107,47,18,72,152,95,86,9,27,78,22,148,151,238,165,115,8,45,5,208,19,69,94,243,146,38,213,197,30,8,245,254,71,53,199,79,7,238,35,175,29,185,222,192,9,190,222,82,187,134,250,99,96,62,121,216,167,149,204,177,124,8,205,243,130,35,118,29,3,62,133,147,194,208,199,147,12,203,173,142,59,71,30,167,97,123,184,32,221,209,163,193,63,255,148,9,205,178,36,185,74,145,137,127,210,213,241,32,162,52,194,31,218,151,133,202,194,28,27,244,72,39,106,151,224,61,121,163,234,185,67,254,121,179,47,203,45,52,198,114,171,166,188,183,68,198,116,28,216,111,55,34,227,132,145,128,168,157,34,128,104,207,4,164,231,250,82,53,92,29,158,133,23,81,38,38,78,178,156,232,13,234,56,244,98,239,157,17,241,240,98,79,121,153,241,132,177,16,231,105,198,139,174,42,236,47,115,186,181,8,92,31,186,241,156,120,83,225,111,1,81,0,231,65,245,151,178,231,111,106,25,169,239,106,15,57,104,69,248,35,57,177,170,102,47,52,167,119,236,174,171,11,187,192,43,174,161,219,53,82,220,175,91,91,80,1,33,128,247,44,192,142,233,191,80,99,202,154,155,53,38,28,93,140,75,54,83
    };

    int expectedVals[] = {  
        -720.0,-720.0,-720.0,1572.0,1572.0,1572.0,188.0,188.0,188.0,308.0,308.0,308.0,972.0,972.0,972.0,-80.0,-80.0,-80.0,-540.0,-540.0,-540.0,-296.0,-296.0,-296.0,120.0,120.0,120.0,0.0,0.0,0.0,1188.0,1188.0,1188.0,-512.0,-512.0,-512.0,-16.0,-16.0,-16.0,-1132.0,-1132.0,-1132.0,824.0,824.0,824.0,-420.0,-420.0,-420.0,784.0,784.0,784.0,56.0,56.0,56.0,900.0,900.0,900.0,56.0,56.0,56.0,-1644.0,-1644.0,-1644.0,162.0,162.0,162.0,-504.0,-504.0,-504.0,-742.0,-742.0,-742.0,-182.0,-182.0,-182.0,230.0,230.0,230.0,266.0,266.0,266.0,-210.0,-210.0,-210.0,372.0,372.0,372.0,-640.0,-640.0,-640.0,-544.0,-544.0,-544.0,-1116.0,-1116.0,-1116.0,1042.0,1042.0,1042.0,-602.0,-602.0,-602.0,180.0,180.0,180.0,-438.0,-438.0,-438.0,-626.0,-626.0,-626.0,-1196.0,-1196.0,-1196.0,-46.0,-46.0,-46.0,-660.0,-660.0,-660.0,916.0,916.0,916.0,874.0,874.0,874.0,296.0,296.0,296.0,-166.0,-166.0,-166.0,-926.0,-926.0,-926.0,-540.0,-540.0,-540.0,498.0,498.0,498.0,308.0,308.0,308.0,1142.0,1142.0,1142.0,-112.0,-112.0,-112.0,1190.0,1190.0,1190.0,104.0,104.0,104.0,316.0,316.0,316.0,-16.0,-16.0,-16.0,510.0,510.0,510.0,514.0,514.0,514.0,428.0,428.0,428.0,794.0,794.0,794.0,538.0,538.0,538.0,-892.0,-892.0,-892.0,-904.0,-904.0,-904.0,-484.0,-484.0,-484.0,90.0,90.0,90.0,976.0,976.0,976.0,606.0,606.0,606.0,2.0,2.0,2.0,-238.0,-238.0,-238.0,-1050.0,-1050.0,-1050.0,192.0,192.0,192.0,-1182.0,-1182.0,-1182.0,-436.0,-436.0,-436.0,182.0,182.0,182.0,546.0,546.0,546.0,598.0,598.0,598.0,584.0,584.0,584.0,64.0,64.0,64.0,-840.0,-840.0,-840.0,152.0,152.0,152.0,478.0,478.0,478.0,-248.0,-248.0,-248.0,-528.0,-528.0,-528.0,140.0,140.0,140.0,-508.0,-508.0,-508.0,-564.0,-564.0,-564.0,684.0,684.0,684.0,756.0,756.0,756.0,-140.0,-140.0,-140.0,-484.0,-484.0,-484.0,810.0,810.0,810.0,-588.0,-588.0,-588.0,300.0,300.0,300.0,-384.0,-384.0,-384.0,-498.0,-498.0,-498.0,-1154.0,-1154.0,-1154.0,-1224.0,-1224.0,-1224.0,-270.0,-270.0,-270.0,-36.0,-36.0,-36.0,112.0,112.0,112.0,-4.0,-4.0,-4.0,-492.0,-492.0,-492.0,-40.0,-40.0,-40.0,-130.0,-130.0,-130.0,-376.0,-376.0,-376.0,78.0,78.0,78.0,-422.0,-422.0,-422.0,-522.0,-522.0,-522.0,-750.0,-750.0,-750.0,-540.0,-540.0,-540.0,896.0,896.0,896.0,168.0,168.0,168.0,560.0,560.0,560.0,-656.0,-656.0,-656.0,102.0,102.0,102.0,492.0,492.0,492.0,494.0,494.0,494.0,1102.0,1102.0,1102.0,336.0,336.0,336.0,-264.0,-264.0,-264.0,436.0,436.0,436.0,-108.0,-108.0,-108.0,604.0,604.0,604.0,638.0,638.0,638.0,404.0,404.0,404.0,960.0,960.0,960.0,108.0,108.0,108.0,222.0,222.0,222.0,-432.0,-432.0,-432.0,-520.0,-520.0,-520.0,96.0,96.0,96.0,638.0,638.0,638.0,284.0,284.0,284.0,958.0,958.0,958.0,-894.0,-894.0,-894.0,816.0,816.0,816.0,200.0,200.0,200.0,240.0,240.0,240.0,-1142.0,-1142.0,-1142.0,-70.0,-70.0,-70.0,634.0,634.0,634.0,-564.0,-564.0,-564.0,-720.0,-720.0,-720.0,366.0,366.0,366.0,908.0,908.0,908.0,-1042.0,-1042.0,-1042.0,-994.0,-994.0,-994.0,526.0,526.0,526.0,642.0,642.0,642.0,-330.0,-330.0,-330.0,290.0,290.0,290.0,994.0,994.0,994.0,-1136.0,-1136.0,-1136.0,878.0,878.0,878.0,-696.0,-696.0,-696.0,692.0,692.0,692.0,-596.0,-596.0,-596.0,-650.0,-650.0,-650.0,-386.0,-386.0,-386.0,1046.0,1046.0,1046.0,-306.0,-306.0,-306.0,-1484.0,-1484.0,-1484.0,-524.0,-524.0,-524.0,-904.0,-904.0,-904.0,-250.0,-250.0,-250.0,-1058.0,-1058.0,-1058.0,494.0,494.0,494.0,556.0,556.0,556.0,830.0,830.0,830.0,6.0,6.0,6.0,-894.0,-894.0,-894.0,-2.0,-2.0,-2.0,-738.0,-738.0,-738.0,-116.0,-116.0,-116.0,-824.0,-824.0,-824.0,154.0,154.0,154.0,616.0,616.0,616.0,-410.0,-410.0,-410.0,-1228.0,-1228.0,-1228.0,304.0,304.0,304.0,744.0,744.0,744.0,308.0,308.0,308.0,1400.0,1400.0,1400.0,890.0,890.0,890.0,1146.0,1146.0,1146.0,206.0,206.0,206.0,-32.0,-32.0,-32.0,-334.0,-334.0,-334.0,-808.0,-808.0,-808.0,-508.0,-508.0,-508.0,106.0,106.0,106.0,1008.0,1008.0,1008.0,-400.0,-400.0,-400.0,-6.0,-6.0,-6.0,-260.0,-260.0,-260.0,558.0,558.0,558.0,512.0,512.0,512.0,806.0,806.0,806.0,28.0,28.0,28.0,460.0,460.0,460.0,414.0,414.0,414.0,-480.0,-480.0,-480.0,404.0,404.0,404.0,-1418.0,-1418.0,-1418.0,-688.0,-688.0,-688.0,-720.0,-720.0,-720.0,-66.0,-66.0,-66.0,570.0,570.0,570.0,-552.0,-552.0,-552.0,232.0,232.0,232.0,1004.0,1004.0,1004.0,-480.0,-480.0,-480.0,-612.0,-612.0,-612.0,946.0,946.0,946.0,-818.0,-818.0,-818.0,400.0,400.0,400.0,-626.0,-626.0,-626.0,-240.0,-240.0,-240.0,-102.0,-102.0,-102.0,-676.0,-676.0,-676.0,-452.0,-452.0,-452.0,-1192.0,-1192.0,-1192.0,1564.0,1564.0,1564.0,-118.0,-118.0,-118.0,954.0,954.0,954.0,130.0,130.0,130.0,580.0,580.0,580.0,18.0,18.0,18.0,-450.0,-450.0,-450.0,228.0,228.0,228.0,-726.0,-726.0,-726.0,-668.0,-668.0,-668.0,744.0,744.0,744.0,842.0,842.0,842.0,-994.0,-994.0,-994.0,644.0,644.0,644.0,828.0,828.0,828.0,394.0,394.0,394.0,-2.0,-2.0,-2.0,-350.0,-350.0,-350.0,782.0,782.0,782.0,676.0,676.0,676.0,208.0,208.0,208.0,-1426.0,-1426.0,-1426.0,-226.0,-226.0,-226.0,-80.0,-80.0,-80.0,-644.0,-644.0,-644.0,-272.0,-272.0,-272.0,14.0,14.0,14.0,850.0,850.0,850.0,-344.0,-344.0,-344.0,670.0,670.0,670.0,430.0,430.0,430.0,-470.0,-470.0,-470.0,-438.0,-438.0,-438.0,-132.0,-132.0,-132.0,-756.0,-756.0,-756.0,-382.0,-382.0,-382.0,-334.0,-334.0,-334.0,708.0,708.0,708.0,-268.0,-268.0,-268.0,316.0,316.0,316.0,1080.0,1080.0,1080.0,-868.0,-868.0,-868.0,214.0,214.0,214.0,762.0,762.0,762.0,466.0,466.0,466.0,-522.0,-522.0,-522.0,-598.0,-598.0,-598.0,-158.0,-158.0,-158.0,-608.0,-608.0,-608.0,-402.0,-402.0,-402.0,-302.0,-302.0,-302.0,880.0,880.0,880.0,52.0,52.0,52.0,660.0,660.0,660.0,-800.0,-800.0,-800.0,1622.0,1622.0,1622.0,-492.0,-492.0,-492.0,-120.0,-120.0,-120.0,-1122.0,-1122.0,-1122.0,1092.0,1092.0,1092.0,1404.0,1404.0,1404.0,56.0,56.0,56.0,988.0,988.0,988.0,-336.0,-336.0,-336.0,-62.0,-62.0,-62.0,612.0,612.0,612.0,820.0,820.0,820.0,786.0,786.0,786.0,1158.0,1158.0,1158.0,242.0,242.0,242.0,-204.0,-204.0,-204.0,-436.0,-436.0,-436.0,-722.0,-722.0,-722.0,1054.0,1054.0,1054.0,-912.0,-912.0,-912.0,656.0,656.0,656.0,-662.0,-662.0,-662.0,222.0,222.0,222.0,-584.0,-584.0,-584.0,-68.0,-68.0,-68.0,956.0,956.0,956.0,-1376.0,-1376.0,-1376.0,-874.0,-874.0,-874.0,-382.0,-382.0,-382.0,286.0,286.0,286.0,4.0,4.0,4.0,-418.0,-418.0,-418.0,-968.0,-968.0,-968.0,-346.0,-346.0,-346.0,-294.0,-294.0,-294.0,728.0,728.0,728.0,-576.0,-576.0,-576.0,-118.0,-118.0,-118.0,-650.0,-650.0,-650.0,-350.0,-350.0,-350.0,-306.0,-306.0,-306.0,924.0,924.0,924.0,-490.0,-490.0,-490.0,980.0,980.0,980.0,640.0,640.0,640.0,-80.0,-80.0,-80.0,-260.0,-260.0,-260.0,886.0,886.0,886.0,452.0,452.0,452.0,718.0,718.0,718.0,-474.0,-474.0,-474.0,-696.0,-696.0,-696.0,-352.0,-352.0,-352.0,114.0,114.0,114.0,-116.0,-116.0,-116.0,-280.0,-280.0,-280.0,-438.0,-438.0,-438.0,1460.0,1460.0,1460.0,264.0,264.0,264.0,1198.0,1198.0,1198.0,-928.0,-928.0,-928.0,734.0,734.0,734.0,-1474.0,-1474.0,-1474.0,-78.0,-78.0,-78.0,-1028.0,-1028.0,-1028.0,-180.0,-180.0,-180.0,86.0,86.0,86.0,512.0,512.0,512.0,248.0,248.0,248.0,-80.0,-80.0,-80.0,-962.0,-962.0,-962.0,296.0,296.0,296.0,1334.0,1334.0,1334.0,430.0,430.0,430.0,644.0,644.0,644.0,264.0,264.0,264.0,-930.0,-930.0,-930.0,650.0,650.0,650.0,60.0,60.0,60.0,-170.0,-170.0,-170.0,-698.0,-698.0,-698.0,478.0,478.0,478.0,240.0,240.0,240.0,656.0,656.0,656.0,-728.0,-728.0,-728.0,480.0,480.0,480.0,-870.0,-870.0,-870.0,-242.0,-242.0,-242.0,-446.0,-446.0,-446.0,1290.0,1290.0,1290.0,-280.0,-280.0,-280.0,-402.0,-402.0,-402.0,562.0,562.0,562.0,-590.0,-590.0,-590.0,-530.0,-530.0,-530.0,-334.0,-334.0,-334.0,198.0,198.0,198.0,340.0,340.0,340.0,-1174.0,-1174.0,-1174.0,-684.0,-684.0,-684.0,166.0,166.0,166.0,42.0,42.0,42.0,56.0,56.0,56.0,736.0,736.0,736.0,160.0,160.0,160.0,864.0,864.0,864.0,-804.0,-804.0,-804.0,1276.0,1276.0,1276.0,-796.0,-796.0,-796.0,296.0,296.0,296.0,-1052.0,-1052.0,-1052.0,-608.0,-608.0,-608.0,824.0,824.0,824.0,24.0,24.0,24.0,-44.0,-44.0,-44.0,-376.0,-376.0,-376.0,-36.0,-36.0,-36.0,668.0,668.0,668.0,724.0,724.0,724.0,1020.0,1020.0,1020.0,320.0,320.0,320.0,-436.0,-436.0,-436.0,-232.0,-232.0,-232.0,20.0,20.0,20.0,-656.0,-656.0,-656.0
                         };

    for(int i = 0; i < 400; i++) 
        src[i] = (unsigned char) srcVals[i];
    /*
        printf("\n\n src: \n\n");
        for(int i = 0; i < 20; i++) {
            for (int j = 0; j < 20; j++) {
                printf("%d,", src[i*20+j]);
            }
            printf("\n---\n");
        }
    */

    unsigned char *paddedSrc = padImgReflective(src, 20, 20); 
    check(paddedSrc != NULL, "paddedSrc is null, so padding operation failed"); 

    /*
        printf("\n\n padded src: \n\n");
        for(int i = 0; i < 22; i++) {
            for (int j = 0; j < 22; j++) {
                printf("%d,", paddedSrc[i*22+j]);
            }
            printf("\n---\n");
        }
    */
    
    int *expected = expectedVals;

    /*
        printf("\n\n expected: \n\n");
        for(int i = 0; i < 20; i++) {
            for (int j = 0; j < 20; j++) {
                printf("%d,", expected[i*20+j]);
            }
            printf("\n---\n");
        }
    */
    int rc = laplacianTransform_new(paddedSrc, paddedTgt, 22, 22); 

    // printf("\n\nlapl transf completed\n\n");
    // printf("\n\nwt\n\n");
    int *tgt = trimImgInt(paddedTgt, 22, 22);
    /*
        printf("\n\n tgt: \n\n");
        for(int i = 0; i < 20; i++) {
            for (int j = 0; j < 20; j++) {
                printf("%d,", tgt[i*20+j]);
            }
            printf("\n---\n");
        }
    */
    // printf("\n\n trimming completed \n\n");

    printf("\n\n");
    for(int i = 0; i < 20; i++) {
        for (int j = 0; j < 20; j++) {
            printf("i %d tgt %d expected %d |", i, tgt[i*20+j], expected[i*20+j]);
        }
    }

    mu_assert(rc==0, "laplacianTransform failed");
    rc = memcmp(tgt, expected, 400*sizeof(int));
    mu_assert(rc==0, "performing laplacianTransform on src doesn't produce expected values");
    free(tgt);
    free(paddedSrc);
    free(paddedTgt);
    free(src);

    return NULL; 

error: 
    return "failed memory or smth";
}
char *test_laplacianTransform_broken(){
    int *paddedTgt = malloc(22*22*sizeof(int)); // take account of padding
    check_mem(paddedTgt);
    unsigned char *src = malloc(400); 
    check_mem(src);

    // srcVals and expectedVals were generated by a python script 
    int srcVals[] = {
        10,2,9,5,3,6,1,10,9,2,6,1,8,0,4,9,5,0,3,7,0,2,8,1,1,1,0,2,10,7,2,10,0,3,7,10,0,1,9,6,1,7,4,0,1,6,8,8,8,7,10,9,2,0,0,9,1,10,8,4,9,4,7,0,4,9,0,1,7,0,9,9,8,5,8,7,10,3,8,2,8,3,4,0,3,6,6,1,9,8,9,4,2,2,10,10,5,6,7,6,4,6,2,5,3,4,8,2,4,5,9,2,0,1,1,1,5,0,2,7,5,5,8,0,2,0,6,6,6,9,3,3,0,6,3,3,7,8,7,5,7,10,3,9,1,2,6,3,1,7,6,6,3,3,7,8,2,4,3,0,2,1,1,10,1,0,2,0,6,6,1,10,1,1,0,9,8,3,3,1,10,4,7,8,8,9,8,0,10,10,7,0,2,2,5,2,1,6,2,4,7,8,9,0,0,0,5,9,5,1,7,10,4,9,7,3,10,1,9,6,0,0,1,10,6,2,7,8,10,3,0,10,6,4,0,0,2,5,0,5,4,8,10,5,4,6,4,6,0,0,10,6,6,3,7,2,6,3,1,4,1,8,2,5,3,5,9,6,4,8,8,5,5,7,4,4,10,7,5,10,2,8,3,3,4,5,8,2,9,3,7,7,5,7,9,10,9,8,4,5,1,5,1,8,8,4,8,5,0,8,5,9,2,2,6,7,2,0,0,8,9,9,4,8,0,9,4,0,8,2,5,9,5,7,4,6,3,0,7,9,8,10,6,6,4,5,6,7,7,0,10,3,10,10,7,0,0,9,4,5,8,9,4,7,2,9,6,6,4,4,8,0,6,9,3,0,9,2,3,1,7,3,5,6,2,6,8,0,9,0,3,3,6,5,1,0,8,8,1,8
    };

    int expectedVals[] = {  
        -18,15,-12,-2,3,-13,13,-18,-5,16,-13,21,-23,15,4,-8,-6,9,7,-5,13,9,-16,10,2,9,12,20,-14,-7,25,-28,23,-5,-11,-15,17,15,-18,2,13,-17,6,6,7,-5,-18,-13,0,-3,-13,-5,9,10,24,-18,25,-27,-1,4,-14,10,-16,11,-3,-20,24,12,-10,31,-8,-6,-14,-2,-10,9,-24,22,-12,12,-8,10,-4,12,1,-2,-9,14,-16,-9,-6,6,6,10,-19,-17,11,-9,-6,-2,7,-10,15,-15,2,1,-14,11,6,10,-17,8,5,5,11,15,-7,21,13,-8,1,9,-22,24,-4,14,-4,-7,-4,-15,15,-1,12,-17,5,7,-10,-14,-10,-1,-4,-24,16,-22,10,-1,-11,1,18,-6,-7,-2,-2,5,-14,-11,19,0,2,9,12,13,17,-21,15,14,6,11,-7,0,25,-32,12,2,22,-18,-17,9,-3,4,-17,10,-6,-7,-14,-20,-16,27,-19,-16,-10,29,-1,9,-9,10,22,-17,14,-3,-3,-12,-20,27,14,16,4,-18,10,21,-10,-19,11,-19,-11,7,-33,26,-27,0,11,17,25,-28,-8,11,-9,0,-24,-1,30,-18,0,2,18,7,13,-14,20,-5,-3,-10,-24,9,4,-9,12,-6,20,21,-26,7,-4,12,-19,9,-7,7,8,4,11,-13,18,-7,6,3,-13,-3,7,-17,-2,6,3,-9,11,10,-14,-2,2,-16,4,-14,2,8,3,1,-8,20,-27,20,-5,-2,1,-5,-9,-11,-6,-12,2,7,13,-1,16,-12,-16,14,-11,-10,30,-22,9,-13,13,14,-2,-4,11,10,19,-10,-9,-8,8,-14,29,-23,7,24,-23,13,6,-14,8,-7,10,-10,-4,19,-15,-7,3,-8,0,1,-3,8,-2,-9,-9,23,-24,17,-16,-7,-11,13,21,-30,8,-1,0,-11,11,-10,14,-17,5,-7,10,-4,-15,20,1,-12,5,12,-26,21,-4,13,-3,12,-2,-4,8,1,-12,23,-23,16,2,0,-4,1,5,9,-7,-13,16,-14
                         };

    for(int i = 0; i < 400; i++) 
        src[i] = (unsigned char) srcVals[i];
    /*
        printf("\n\n src: \n\n");
        for(int i = 0; i < 20; i++) {
            for (int j = 0; j < 20; j++) {
                printf("%d,", src[i*20+j]);
            }
            printf("\n---\n");
        }
    */

    unsigned char *paddedSrc = padImgReflective(src, 20, 20); 
    check(paddedSrc != NULL, "paddedSrc is null, so padding operation failed"); 

    // /*
        printf("\n\n padded src: \n\n");
        for(int i = 0; i < 22; i++) {
            for (int j = 0; j < 22; j++) {
                printf("%d,", paddedSrc[i*22+j]);
            }
            printf("\n---\n");
        }
    // */
    
    int *expected = expectedVals;

    /*
        printf("\n\n expected: \n\n");
        for(int i = 0; i < 20; i++) {
            for (int j = 0; j < 20; j++) {
                printf("%d,", expected[i*20+j]);
            }
            printf("\n---\n");
        }
    */
    int rc = laplacianTransform(paddedSrc, paddedTgt, 22, 22); 

    // printf("\n\nlapl transf completed\n\n");
    // printf("\n\nwt\n\n");
    int *tgt = trimImgInt(paddedTgt, 22, 22);
    /*
        printf("\n\n tgt: \n\n");
        for(int i = 0; i < 20; i++) {
            for (int j = 0; j < 20; j++) {
                printf("%d,", tgt[i*20+j]);
            }
            printf("\n---\n");
        }
    */
    // printf("\n\n trimming completed \n\n");

    mu_assert(rc==0, "laplacianTransform failed");
    rc = memcmp(tgt, expected, 400*sizeof(int));
    mu_assert(rc==0, "performing laplacianTransform on src doesn't produce expected values");
    free(tgt);
    free(paddedSrc);
    free(paddedTgt);
    free(src);

    printf("\n\nsuccessfully ran lapl transf correctly on 20x20 input\n\n");

    int cols = 2560;
    int rows = 80;

    int src2_int[2560 * 80];
    int expected2[2560 * 80];

    readIntArray("/mnt/c/Users/jaro/Documents/A_privat_dev/DynamicFocus/C/c-skeleton/tests/src2560x80nonlaplacian.txt", src2_int, rows * cols);
    readIntArray("/mnt/c/Users/jaro/Documents/A_privat_dev/DynamicFocus/C/c-skeleton/tests/tgt2560x80laplacian.txt", expected2, rows * cols);

    // for(int i = 0; i < rows * cols; i++) {
    //     printf("%d,", expected2[i]);
    // }

    // return NULL;

    unsigned char *src2 = malloc(cols*rows); 
    check_mem(src2);
    /*
        for(int i = 0; i < cols*rows; i++) {
            printf("%d,", src2_int[i]);
            src2[i] = (unsigned char) src2_int[i];
        }
        printf("\n\n");
    */
    /*
        for(int i = 0; i < cols*rows; i++) {
            printf("%d,", expected2[i]);
        }
        printf("\n\n");
    */
    unsigned char *paddedSrc2 = padImgReflective(src2, cols, rows); 
    check(paddedSrc2 != NULL, "paddedSrc is null, so padding operation failed");
    for(int i = 0; i < cols*rows; i++) {
        if(i % cols == 0) 
            printf("\n");
        printf("%d,", paddedSrc2[i]);
    }

    int *paddedTgt2 = malloc((rows+2)*(cols+2)*sizeof(int)); // take account of padding
    check_mem(paddedTgt2);
    
    rc = laplacianTransform(paddedSrc2, paddedTgt2, cols+2, rows+2); 
    if(rc != 0) {
        printf("laplacianTransform failed on paddedSrc2!");
        exit(1);
    }
    int *tgt2 = trimImgInt(paddedTgt2, cols+2, rows+2);
    
    // for(int i = 0; i < cols*rows; i++) {
    //     if(tgt2[i] != expected2[i]) {
    //         printf("i %d expected %d got %d src is %d\n", i, expected2[i], tgt[i], src[i]);
    //     }
    //     // printf("%d,", tgt2[i]);
    // }
    // printf("\n\n");
    

    mu_assert(rc==0, "laplcianTransform failed on 2560x80 img");
    rc = memcmp(tgt2, &expected2, rows*cols*sizeof(int));
    mu_assert(rc==0, "performing lapl transf on 2560x80 src doesn't produce expected values");
    free(paddedSrc2);
    free(paddedTgt2);
    free(tgt2);

    printf("\n\nLAPLACIAN TRANSFORM ON 2560x80 IMG WORKS!!\n\n");

    return NULL; 

error: 
    return "failed memory or smth";
}

char *test_var() {
    int vals[] = {0, 0, 0, 1, 2, 3, 4, 5, 6, 12, 12, 15, 43, 52, 86, 94, 94, 105, 200, 254};
    double expectedVar = 4847.94;

    /*
    int *X = malloc(20);
    check_mem(X);
    for(int i = 0; i < 20; i++) {
        X[i] = vals[i];
    }*/

    int *X = vals;

    double res = var(X, 20);
    //    printf("true: %f, calculated: %f\n", expectedVar, res);
    mu_assert(res == expectedVar, "var() didn't produce expected variance");

    return NULL;
error: 
    return "Test failed, memory error";
}
/*
    char *test_calcVol() {

        /*
            ../34/tape1/0/0.bmp has vol 800.022539
            ../34/tape1/0/0.bmp crop 0 has vol 800.022539
            ../34/tape1/0/0.bmp crop 1 has vol 918.871836
            ../34/tape1/0/0.bmp crop 2 has vol 886.939883
            ../34/tape1/0/0.bmp crop 3 has vol 868.839023
            ../34/tape1/0/0.bmp crop 4 has vol 819.913281
            ../34/tape1/0/0.bmp crop 5 has vol 783.328281
            ../34/tape1/0/0.bmp crop 6 has vol 861.329766
            ../34/tape1/0/0.bmp crop 7 has vol 866.458789
            ../34/tape1/0/0.bmp crop 8 has vol 763.240977
            ../34/tape1/0/0.bmp crop 9 has vol 709.356914
            ../34/tape1/0/0.bmp crop 10 has vol 742.474062
            ../34/tape1/0/0.bmp crop 11 has vol 921.403164
            ../34/tape1/0/0.bmp crop 12 has vol 849.191328
            ../34/tape1/0/0.bmp crop 13 has vol 838.561602
            ../34/tape1/0/0.bmp crop 14 has vol 868.200742
            ../34/tape1/0/0.bmp crop 15 has vol 789.478008
            ../34/tape1/0/0.bmp crop 16 has vol 793.346914
            ../34/tape1/0/0.bmp crop 17 has vol 684.134766
            ../34/tape1/0/0.bmp crop 18 has vol 627.725977
            ../34/tape1/0/0.bmp crop 19 has vol 575.836250
            ../34/tape1/0/0.bmp crop 20 has vol 571.259063
            ../34/tape1/0/0.bmp crop 21 has vol 523.551211
            ../34/tape1/0/0.bmp crop 22 has vol 508.818789
            ../34/tape1/0/0.bmp crop 23 has vol 512.985586
        
        IMAGE *img = malloc(sizeof(IMAGE));
        loadBnp(img, "../../34/tape1/0/0.bmp");
        double expectedVol = 800.022539;

        int paddedImgWidth = img->ih.width+2;
        int paddedImgHeight= img->ih.height+2;
        unsigned char *paddedImg = padImg(img->imageData, img->ih.width, img->ih.height, 0);

        img->imageData = paddedImg;

        unsigned char *laplImg = malloc(paddedImgWidth * paddedImgHeight);
        laplacianTransform(paddedImg, laplImg, paddedImgWidth, paddedImgHeight);

        printf("\n\nlaplSuccess\n\n");

        unsigned char *laplImgTrimmed = trimImg(laplImg, paddedImgWidth, paddedImgHeight);

        printf("\n\ntrimSuccess\n\n");

        double vol = calcVol(laplImgTrimmed, paddedImgWidth, paddedImgHeight);

        printf("\n\ncalcVol\n\n");

        printf("\ntrue: %f, calculated: %f\n", expectedVol, vol);
        mu_assert(vol==expectedVol, "calcVol doesn't produce correct vol of tape1 img 0");

        free(img);
        free(paddedImg);
        return NULL;
    }
*/
char *all_tests() {
    mu_suite_start();

    mu_run_test(test_loadBnp_destroyImage);
    mu_run_test(test_switchLineOrder);
    mu_run_test(test_var);
    mu_run_test(test_padImg);
    mu_run_test(test_padImgReflective);
    mu_run_test(test_trimImg);
    mu_run_test(test_laplacianTransform);

    return NULL;
}

// RUN_TESTS(all_tests);